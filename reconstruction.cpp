#include "ReadEvent.h"
#include "ReadDetector.h"
#include "event.h"
#include <fstream>
#include <string>
#include <TH1F.h>
#include <TFile.h>

using namespace std;

void reconstruction(const char* event_name = "events.dat", const char* detector_name = "measures.dat", const char* root_name = "reconstruction.root") {
  ifstream event_file(event_name);
  ifstream detector_file(detector_name);
  string str1, str2;
  event ev;
  // Event variables and measures
  int ev_no1, dec_no, ev_no; //event and decay number. ev_no1 needed to "synchronize" event_file with detector_file
  double K_z, K_p, 
    pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi, 
    x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min,
    x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min;
  int imax = 0; //Total number of events

  // Histograms
  TFile* root_out = new TFile(root_name,"RECREATE");
  TH1F* CDA_plus_hist = new TH1F("CDA_plus_hist","Pi+ CDA Reco Histogram", 1000, 1, 0);
  TH1F* CDA_min_hist = new TH1F("CDA_min_hist","Pi- CDA Reco Histogram", 1000, 1, 0);
  TH1F* CDA_mean_hist = new TH1F("CDA_mean_hist","Mean CDA Reco Histogram", 1000, 1, 0);
  TH1F* kinematic_z_reco_hist = new TH1F("kinematic_z_reco_hist","Kinematic Fit z Reco Histogram", 1000, 1, 0);

  //Skip first 5 lines and get imax
  getline(event_file,str1);
  getline(detector_file,str2);
  if (str1 != str2) {cout << "ERROR: Different file source" << endl; cin.get();} // Check if detector file was generated by the same event file we are using now
  else {
    getline(event_file,str1);
    getline(detector_file,str2);
    if (str1 != str2) {cout << "ERROR: Different file source" << endl; cin.get();}
    else {
      str1 = str1.substr(10);
      imax = atoi(str1.c_str());
    getline(event_file,str1);
    getline(detector_file,str2);
    getline(event_file,str1);
    getline(detector_file,str2);
    getline(event_file,str1);
    getline(detector_file,str2);      
    }
  }

  /////////// RECONSTRUCTION /////////////////////

  ReadEvent(event_file,ev_no,K_z,K_p, pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi);
  ReadDetector(detector_file,dec_no, ev_no1 ,x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min, x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min);
  
  while (!event_file.eof() && !detector_file.eof()) {
    if (dec_no % int(double(imax)/20) == 0) cout << double(dec_no)/double(imax)*100 << "% completed..." << endl;
    if (dec_no == ev_no) {
      ev.SetEvent(dec_no,ev_no,K_z,K_p,pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi, x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min, x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min);
      ev.Reconstruction(CDA_plus_hist, CDA_min_hist, CDA_mean_hist, kinematic_z_reco_hist);
    }
    else {
      ReadEvent(event_file,ev_no,K_z,K_p, pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi);
      continue;
    }
    ReadEvent(event_file,ev_no,K_z,K_p, pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi);
    ReadDetector(detector_file,dec_no, ev_no1 ,x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min, x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min);
  }

  CDA_plus_hist->Write();
  CDA_min_hist->Write();
  CDA_mean_hist->Write();
  kinematic_z_reco_hist->Write();

  root_out->Close();



}
