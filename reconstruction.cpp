#include "ReadEvent.h"
#include "ReadDetector.h"
#include "event.h"
#include <fstream>
#include <iomanip>
#include <iostream>
#include <string>
#include <TH1F.h>
#include <TH2F.h>
#include <TFile.h>
#include <sstream>
#include <exception>

using namespace std;

void reconstruction(const char* event_name = "events", const char* detector_name = "measures", const char* root_name = "reconstruction") {
  stringstream ss;
  string path = "../Spettrometro_Files/";
  string complete_event_name;
  string complete_detector_name;
  string complete_root_name;
  string dat_ext = ".dat";
  string root_ext = ".root";

  ss << event_name;
  ss >> complete_event_name;
  complete_event_name = path + complete_event_name + dat_ext;
  ss.clear();

  ss << detector_name;
  ss >> complete_detector_name;
  complete_detector_name = path + complete_detector_name + dat_ext;
  ss.clear();

  ss << root_name;
  ss >> complete_root_name;
  complete_root_name = path + complete_root_name + root_ext;
  ss.clear();
  

  ifstream event_file(complete_event_name.c_str());
  ifstream detector_file(complete_detector_name.c_str());
  string str1, str2;
  event ev;
  // Event variables and measures
  int ev_no1, dec_no, ev_no; //event and decay number. ev_no1 needed to "synchronize" event_file with detector_file
  double K_z, K_p, 
    pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi, 
    x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min,
    x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min;
  int imax = 0; //Total number of events

  // Histograms
  TFile* root_out = new TFile(complete_root_name.c_str(),"RECREATE");
  TH1F* CDA_plus_hist = new TH1F("CDA_plus_hist","Pi+ CDA Reco Histogram", 1000, 1, 0);
  TH1F* CDA_min_hist = new TH1F("CDA_min_hist","Pi- CDA Reco Histogram", 1000, 1, 0);
  TH1F* CDA_mean_hist = new TH1F("CDA_mean_hist","Mean CDA Reco Histogram", 1000, 1, 0);
  TH1F* kinematic_z_reco_hist = new TH1F("kinematic_z_reco_hist","Kinematic Fit z Reco Histogram", 1000, 1, 0);
  TH1F* iteration_hist = new TH1F("iteration_hist","Iterative Kin Fit Hist; z - z_t;#", 1000, -10,10);
  TH1F* iteration_cut_hist = new TH1F("iteration_cut_hist","Iterative Kin Fit (Cut) Hist; z - z_t; #", 1000, -10, 10);
  TH1F* iteration_no_hist = new TH1F("iteration_no_hist","Iterative Kin Fit Hist", 10000, 0, 10000);
  TH1F* kin_iter_diff_hist = new TH1F("kin_iter_diff_hist","Iterative Kin Fit Difference Hist", 1000, 1, 0);
  TH2F* kin_iter_zz_hist = new TH2F("kin_iter_zz_hist","z_kin - z_iter Corr Hist", 1000, 1, 0, 1000, 1, 0);
  TH1F* chi2_init_hist = new TH1F("chi2_init_hist","Initial Chi2 Hist", 1000, 1, 0);
  TH2F* chi2_corr_hist = new TH2F("chi2_corr_hist","Chi2 - z_res Hist", 1000, 1, 0, 1000, 1, 0);
  TH1F* chi2_kin_hist = new TH1F("chi2_kin_hist","Chi2 Kin Hist", 1000, 0, 200);
  TH1F* chi2_iter_hist = new TH1F("chi2_iter_hist","Iterative Chi2 Kin Hist", 100, 1, 0);
  TH2F* z_theta_corr_hist = new TH2F("z_theta_corr_hist","z - theta Corr Hist", 1000, 1, 0, 1000, 1, 0);
  TH2F* z_itno_iter_corr_hist = new TH2F("z_itno_iter_corr_hist","z - It.No Iter Corr Hist", 1000, 1, 0, 1000, 1, 0);
 

  //Skip first 5 lines and get imax
  getline(event_file,str1);

  getline(detector_file,str2);
  if (str1 != str2) {cout << "ERROR: Different file source" << endl; cin.get();} // Check if detector file was generated by the same event file we are using now
  else {
    getline(event_file,str1);
    getline(detector_file,str2);
    if (str1 != str2) {cout << "ERROR: Different file source" << endl; cin.get();}
    else {
      str1 = str1.substr(10);
      imax = atoi(str1.c_str());
    getline(event_file,str1);
    getline(detector_file,str2);
    getline(event_file,str1);
    getline(detector_file,str2);
    getline(event_file,str1);
    getline(detector_file,str2);      
    }
  }

  /////////// RECONSTRUCTION /////////////////////

  ReadEvent(event_file,ev_no,K_z,K_p, pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi);
  ReadDetector(detector_file,dec_no, ev_no1 ,x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min, x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min);
  

  while (!event_file.eof() && !detector_file.eof()) {

    if (ev_no % int(double(imax)/100*5) == 0) cout << int(double(ev_no)/double(imax)*100) << "% completed..." << endl;
    if (dec_no == ev_no) {

      ev.SetEvent(dec_no,ev_no,K_z,K_p,pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi, x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min, x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min);

      ev.Reconstruction(CDA_plus_hist, CDA_min_hist, CDA_mean_hist, kinematic_z_reco_hist, iteration_hist, iteration_cut_hist, iteration_no_hist, z_itno_iter_corr_hist, kin_iter_diff_hist, kin_iter_zz_hist, chi2_init_hist, chi2_corr_hist, chi2_kin_hist, chi2_iter_hist, z_theta_corr_hist);
      

      
    }
    else {
      ReadEvent(event_file,ev_no,K_z,K_p, pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi);
      continue;
    }
    ReadEvent(event_file,ev_no,K_z,K_p, pi_plus_modp, pi_plus_theta, pi_plus_phi, pi_min_modp, pi_min_theta, pi_min_phi);
    ReadDetector(detector_file,dec_no, ev_no1 ,x1_plus, y1_plus, z1_plus, x1_min, y1_min, z1_min, x2_plus, y2_plus, z2_plus, x2_min, y2_min, z2_min);
  }




  CDA_plus_hist->Write();
  CDA_min_hist->Write();
  CDA_mean_hist->Write();
  kinematic_z_reco_hist->Write();
  iteration_hist->Write();
  iteration_cut_hist->Write();
  iteration_no_hist->Write();
  kin_iter_diff_hist->Write();
  kin_iter_zz_hist->Write();
  chi2_kin_hist->Write();
  chi2_iter_hist->Write();
  chi2_init_hist->Write();
  chi2_corr_hist->Write();
  z_theta_corr_hist->Write();
  z_itno_iter_corr_hist->Write();

  root_out->Close();



}
